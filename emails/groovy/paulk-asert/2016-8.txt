I had a quick look at log4j. The line number information is extracted by
walking the stacktrace with a fairly simplistic algorithm. It walks the
stacktrace and stops one after classes that it expects from the logging
framework itself. This is true for statically-compiled Groovy but dynamic
Groovy has numerous additional Groovy runtime entries in the stacktrace.Here is some self-contained code which illustrates the issue:@Grab('log4j:log4j:1.2.17')
import groovy.util.logging.Log4j@Log4j
class Foo {
  static main(args) {
    org.apache.log4j.PropertyConfigurator.configure([
      'log4j.rootLogger': 'INFO,stdout',
      'log4j.appender.stdout': 'org.apache.log4j.ConsoleAppender',
      'log4j.appender.stdout.Target': 'System.out',
      'log4j.appender.stdout.layout': 'org.apache.log4j.PatternLayout',
      'log4j.appender.stdout.layout.ConversionPattern': '%5p %c{1}:%L -
%m%n'
    ] as Properties)
    log.info('hello from main') // line 14
    test()
    println 'Line number is:' + new org.apache.log4j.spi.LocationInfo(new
RuntimeException(),
        'org.codehaus.groovy.runtime.callsite.AbstractCallSite').lineNumber
// starts on line 16  }
  @groovy.transform.CompileStatic
  static test() {
    log.info('hello from test') // line 22  }
}The output is: INFO Foo:? - hello from main
 INFO Foo:22 - hello from test
Line number is:16The last line of output illustrates that you can get the correct info out
of the log4j classes if you tell it about the Groovy runtime classes to
expect in the stacktrace. So, if you really wanted to, you could write your
own Groovy-aware layout classes. I imagine the story is similar for other
logging frameworks.Cheers, Paul.On Thu, Aug 25, 2016 at 5:26 AM, Raviteja Lokineni <
raviteja.lokineni@gmail.com> wrote: